{"version":3,"sources":["game/GameService.js","components/draw/Hexagon.js","components/draw/DefaultHexagon.js","components/board/Hex.js","components/board/Board.js","components/resources/ProductionBox.js","components/resources/ResourceBox.js","components/resources/ResourceAndProductionBoxes.js","components/resources/TagCircle.js","components/players/Player.js","components/players/Players.js","components/draw/RightArrow.js","components/projects/PowerPlantStandardProject.js","components/projects/StandardProjects.js","components/parameters/GlobalParameter.js","components/parameters/GlobalParameters.js","components/Game.js","game/GameControl.js","App.js","serviceWorker.js","index.js"],"names":["GameService","player","project","name","cost","resources","resource","value","production","canPurchase","newPlayer","benefit","playerCount","board","this","makeBoard","globalParameters","makeGlobalParameters","activePlayer","players","slice","map","makePlayer","_","range","y","x","active","Math","ceil","abs","parameters","parameter","initialValue","Object","assign","indexBy","object","makeResource","tags","tag","makeTag","hand","playedCards","initialProduction","type","played","cards","label","colour","fontColour","prefix","total","standardProjects","money","energy","id","resourcesByName","standardProjectsByName","Hexagon","props","size","constructor","position","fill","transform","undefined","points","getPointsString","stroke","strokeWidth","pointsStringBySize","ratio","join","Component","DefaultHexagon","xlinkHref","DefaultHexagonDef","Def","Hex","getMeasurements","shortSize","longOffset","shortOffset","longSize","floor","sqrt","Board","offset","getBorder","width","height","row","filter","tile","key","length","ProductionBox","dominantBaseline","textAnchor","ResourceBox","ResourceAndProductionBoxes","vertical","TagCircle","rx","ry","Player","selectPlayer","control","getSize","fillOpacity","onClick","className","style","pointerEvents","tr","index","Players","playerSize","RightArrow","d","path","PowerPlantStandardProject","purchase","purchaseProject","powerPlant","component","StandardProjects","game","GlobalParameter","globalParametersSize","GlobalParameters","globalParameterSize","column","max","rows","Game","gameSize","boardSize","playersSize","standardProjectsSize","GameControl","update","otherPlayer","updateActivePlayer","App","state","makeGame","updateGame","func","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb2f04b2.chunk.js","sourcesContent":["import _ from \"underscore\";\r\n\r\nclass GameService {\r\n\tstatic resources = [\r\n  \t{name: 'tr', label: 'Terraform Rating', colour: 'cyan', fontColour: 'white', initialProduction: 20},\r\n  \t{name: 'money', label: 'MegaCredits', colour: 'yellow', fontColour: 'black', initialValue: 42},\r\n  \t{name: 'steel', label: 'Steel', colour: 'brown', fontColour: 'white'},\r\n  \t{name: 'titanium', label: 'Titanium', colour: 'black', fontColour: 'white'},\r\n  \t{name: 'plants', label: 'Plants', colour: 'green', fontColour: 'white'},\r\n  \t{name: 'energy', label: 'Energy', colour: 'purple', fontColour: 'white'},\r\n  \t{name: 'heat', label: 'Heat', colour: 'orangered', fontColour: 'white'},\r\n  ];\r\n  static tags = [\r\n  \t{name: 'building', label: 'Building', colour: 'brown', fontColour: 'white', prefix: 'B'},\r\n    {name: 'space', label: 'Space', colour: 'black', fontColour: 'white', prefix: 'S'},\r\n    {name: 'plant', label: 'Plant', colour: 'green', fontColour: 'white', prefix: 'P'},\r\n    {name: 'energy', label: 'Energy', colour: 'purple', fontColour: 'white', prefix: 'En'},\r\n    {name: 'science', label: 'Science', colour: 'white', fontColour: 'black', prefix: 'S'},\r\n    {name: 'earth', label: 'Earth', colour: 'cyan', fontColour: 'black', prefix: 'Ea'},\r\n    {name: 'jupiter', label: 'Jupiter', colour: 'orange', fontColour: 'black', prefix: 'J'},\r\n  \t{name: 'animal', label: 'Animal', colour: 'green', fontColour: 'white', prefix: 'A'},\r\n    {name: 'microbe', label: 'Microbe', colour: 'green', fontColour: 'white', prefix: 'M'},\r\n    {name: 'event', label: 'Event', colour: 'yellow', fontColour: 'black', prefix: 'Ev'},\r\n    {name: 'city', label: 'City', colour: 'grey', fontColour: 'black', prefix: 'C'},\r\n  ];\r\n  static globalParameters = [\r\n  \t{name: 'temperature', label: 'Temperature', initialValue: 1, total: 20},\r\n  ];\r\n  static standardProjects = [\r\n  \t{\r\n    \tname: 'powerPlant',\r\n      cost: {money: {value: 11}},\r\n      benefit: {energy: {production: 1}},\r\n    },\r\n  ];\r\n  static players = [\r\n  \t{id: 1, colour: 'red', fontColour: 'white'},\r\n  \t{id: 2, colour: 'blue', fontColour: 'white'},\r\n  ];\r\n  static canPurchase(player, project) {\r\n    if (!player) {\r\n      return false;\r\n    }\r\n  \tfor (const name in project.cost) {\r\n    \tif (!(name in player.resources)) {\r\n      \treturn false;\r\n      }\r\n      const resource = player.resources[name];\r\n      const cost = project.cost[name];\r\n      if ('value' in cost) {\r\n      \tif (cost.value > resource.value) {\r\n        \treturn false;\r\n        }\r\n      }\r\n      if ('production' in cost) {\r\n      \tif (cost.production > resource.production) {\r\n        \treturn false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n  static purchase(player, project) {\r\n  \tif (!GameService.canPurchase(player, project)) {\r\n    \treturn player;\r\n    }\r\n    const newPlayer = {...player, resources: {...player.resources}};\r\n    for (const name in project.cost) {\r\n    \tconst cost = project.cost[name];\r\n    \tconst resource = newPlayer.resources[name] = {...newPlayer.resources[name]};\r\n      if ('value' in cost) {\r\n      \tresource.value -= cost.value;\r\n      }\r\n      if ('production' in cost) {\r\n      \tresource.production -= cost.production;\r\n      }\r\n    }\r\n    for (const name in project.benefit) {\r\n    \tconst benefit = project.benefit[name];\r\n      const resource = newPlayer.resources[name] = {...newPlayer.resources[name]};\r\n      if ('value' in benefit) {\r\n      \tresource.value += benefit.value;\r\n      }\r\n      if ('production' in benefit) {\r\n      \tresource.production += benefit.production;\r\n      }\r\n    }\r\n    return newPlayer;\r\n  }\r\n  static makeGame({playerCount = 2} = {}) {\r\n  \treturn {\r\n      board: this.makeBoard(),\r\n      globalParameters: this.makeGlobalParameters(),\r\n      activePlayer: null,\r\n      players: this.players\r\n      \t.slice(0, playerCount)\r\n        .map(player => this.makePlayer(player)),\r\n    };\r\n  }\r\n  static makeBoard() {\r\n  \treturn _.range(9).map(y => _.range(9).map(x => ({\r\n      x, y, active: (\r\n        x >= Math.ceil((Math.abs(y - 4) - 1) / 2)\r\n        && x <= 8 - Math.ceil((Math.abs(y - 4)) / 2)\r\n      ) || (y === 0 && x === 0) || (y === 8 && x === 0),\r\n    })));\r\n  }\r\n  static makeGlobalParameters() {\r\n  \tconst parameters = this.globalParameters.map(parameter => ({\r\n    \t...parameter,\r\n      value: parameter.initialValue,\r\n    }));\r\n    Object.assign(parameters, _.indexBy(parameters, 'name'));\r\n\r\n    return parameters;\r\n  }\r\n  static makePlayer(player) {\r\n    return {\r\n      ...player,\r\n      resources: _.object(this.resources.map(resource =>\r\n      \t[resource.name, this.makeResource(resource)])),\r\n      tags: _.object(this.tags.map(tag =>\r\n      \t[tag.name, this.makeTag(tag)])),\r\n      hand: [],\r\n      playedCards: [],\r\n      active: false,\r\n    };\r\n  }\r\n  static makeResource(resource) {\r\n  \treturn {\r\n      value: resource.initialValue || 0,\r\n      production: resource.initialProduction || 0,\r\n      type: resource,\r\n    };\r\n  }\r\n  static makeTag(tag) {\r\n  \treturn {\r\n    \tplayed: 0,\r\n      cards: [],\r\n      type: tag,\r\n    };\r\n  }\r\n}\r\nGameService.resourcesByName = _.indexBy(GameService.resources, 'name');\r\nGameService.standardProjectsByName = _.indexBy(GameService.standardProjects, 'name');\r\n\r\nexport default GameService;\r\n","import React, {Component} from \"react\";\r\n\r\nclass Hexagon extends Component {\r\n  static size = 25;\r\n  static points = [\r\n    [0, 50],\r\n    [43, 25],\r\n    [43, -25],\r\n    [0, -50],\r\n    [-43, -25],\r\n    [-43, 25],\r\n    [0, 50],\r\n  ];\r\n  static pointsStringBySize = {};\r\n\r\n  static getPointsString(size) {\r\n    if (!(size in this.pointsStringBySize)) {\r\n      const ratio = size / 50;\r\n      this.pointsStringBySize[size] = this.points\r\n        .map(([x, y]) => `${x * ratio},${y * ratio}`)\r\n        .join(' ');\r\n    }\r\n    return this.pointsStringBySize[size];\r\n  }\r\n\r\n  render() {\r\n    const {id, size = this.constructor.size, position, fill} = this.props;\r\n    return (\r\n      <polygon\r\n        id={id}\r\n        transform={position ? `translate(${position.x}, ${position.y})` : undefined}\r\n        points={this.constructor.getPointsString(size)}\r\n        stroke={'red'} strokeWidth={3}\r\n        fill={fill}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hexagon;\r\n","import React, {Component} from \"react\";\r\nimport Hexagon from \"./Hexagon\";\r\n\r\nclass DefaultHexagon extends Component {\r\n  static xlinkHref = 'hexagonDefault';\r\n\r\n  render() {\r\n    const {position = {x: 0, y: 0}, fill} = this.props;\r\n    return (\r\n      <use\r\n        x={position.x} y={position.y}\r\n        xlinkHref={`#${this.constructor.xlinkHref}`}\r\n        fill={fill}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass DefaultHexagonDef extends Component {\r\n  render() {\r\n    return (\r\n      <Hexagon id={DefaultHexagon.xlinkHref}/>\r\n    );\r\n  }\r\n}\r\nDefaultHexagon.Def = DefaultHexagonDef;\r\n\r\nexport default DefaultHexagon;\r\n","import React, {Component} from \"react\";\r\nimport Hexagon from \"../draw/Hexagon\";\r\nimport DefaultHexagon from \"../draw/DefaultHexagon\";\r\n\r\nclass Hex extends Component {\r\n  static getMeasurements(size = Hexagon.size) {\r\n    const longSize = 2 * size;\r\n    const shortSize = Math.floor(size * Math.sqrt(3));\r\n    const longOffset = longSize * 3 / 4 - 1 /* Subtract 1 for a snug fit */;\r\n    const shortOffset = shortSize - 1 /* Subtract 1 for a snug fit */;\r\n    return {longSize, shortSize, longOffset, shortOffset};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      size = Hexagon.size,\r\n      x = 0, y = 0,\r\n      fill = 'black',\r\n    } = this.props;\r\n    const {shortSize, longOffset, shortOffset} = this.constructor.getMeasurements(size);\r\n    return (\r\n      <DefaultHexagon position={{\r\n        x: (y % 2 === 0 ? 0 : shortSize / 2) + shortOffset * x,\r\n        y: longOffset * y,\r\n      }} fill={fill}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hex;\r\n","import React, {Component} from \"react\";\r\nimport Hex from \"./Hex\";\r\n\r\nclass Board extends Component {\r\n  static getBorder(board) {\r\n    const {longSize, shortSize, longOffset, shortOffset} = Hex.getMeasurements();\r\n    const x = -shortSize / 2 - 20, y = -longSize / 2 - 20;\r\n    const width = board[0].length * shortOffset + 40;\r\n    const height = board.length * longOffset - longOffset + longSize + 40;\r\n    return {x, y, width, height};\r\n  }\r\n\r\n  static getSize(board) {\r\n    const {width, height} = this.getBorder(board);\r\n    return {width, height};\r\n  }\r\n\r\n  render() {\r\n    const {board, offset} = this.props;\r\n    const {x, y, width, height} = this.constructor.getBorder(board);\r\n    return (\r\n      <g transform={`translate(${-x + offset.x}, ${-y + offset.y})`}>\r\n        <rect x={x} y={y} width={width} height={height}/>\r\n        {board.map(row => row.filter(tile => tile.active).map(tile =>\r\n          <Hex key={`${tile.x},${tile.y}`} x={tile.x} y={tile.y}/>))}\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, {Component} from \"react\";\r\n\r\nclass ProductionBox extends Component {\r\n  render() {\r\n    const {resource, offset} = this.props;\r\n    return (\r\n      <g transform={`translate(${offset.x}, ${3 + offset.y})`}>\r\n        <rect\r\n          width={19} height={19}\r\n          fill={resource.type.colour} stroke={'slategrey'} strokeWidth={4}\r\n        />\r\n        <svg width={19} height={19}>\r\n          <text\r\n            x={\"50%\"} y={\"50%\"}\r\n            dominantBaseline={\"middle\"} textAnchor={\"middle\"}\r\n            fill={resource.type.fontColour}\r\n          >{resource.production}</text>\r\n        </svg>\r\n        <rect\r\n          width={19} height={19}\r\n          fill={'transparent'} stroke={'transparent'} strokeWidth={4}\r\n        >\r\n          <title>{resource.production} {resource.type.label} per\r\n            generation</title>\r\n        </rect>\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductionBox;\r\n","import React, {Component} from \"react\";\r\n\r\nclass ResourceBox extends Component {\r\n  render() {\r\n    const {resource, offset} = this.props;\r\n    return (\r\n      <g transform={`translate(${offset.x}, ${3 + offset.y})`}>\r\n        <rect\r\n          width={19} height={19}\r\n          fill={resource.type.colour} stroke={'black'}\r\n        />\r\n        <svg width={19} height={19}>\r\n          <text\r\n            x={\"50%\"} y={\"50%\"}\r\n            dominantBaseline={\"middle\"} textAnchor={\"middle\"}\r\n            fill={resource.type.fontColour}\r\n          >{resource.value}</text>\r\n        </svg>\r\n        <rect\r\n          width={19} height={19}\r\n          fill={'transparent'} stroke={'transparent'}\r\n        >\r\n          <title>{resource.value} {resource.type.label}</title>\r\n        </rect>\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceBox;\r\n","import React, {Component, Fragment} from \"react\";\r\nimport ResourceBox from \"./ResourceBox\";\r\nimport ProductionBox from \"./ProductionBox\";\r\n\r\nclass ResourceAndProductionBoxes extends Component {\r\n  render() {\r\n    const {resource, offset, vertical = true} = this.props;\r\n    return (\r\n      <Fragment>\r\n        <ResourceBox\r\n          offset={{x: 0 + offset.x, y: 0 + offset.y}} resource={resource}\r\n        />\r\n        <ProductionBox\r\n          offset={\r\n            vertical\r\n              ? {x: 0 + offset.x, y: 25 + offset.y}\r\n              : {x: 25 + offset.x, y: 0 + offset.y}\r\n          }\r\n          resource={resource}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default ResourceAndProductionBoxes;\r\n","import React, {Component} from \"react\";\r\n\r\nclass TagCircle extends Component {\r\n  render() {\r\n    const {tag, offset} = this.props;\r\n    return (\r\n      <g transform={`translate(${offset.x}, ${3 + offset.y})`}>\r\n        <rect width={19} height={19} rx={10} ry={10} fill={tag.type.colour}\r\n              stroke={'black'}/>\r\n        <svg width={19} height={19}>\r\n          <text\r\n            x={\"50%\"} y={\"50%\"}\r\n            dominantBaseline={\"middle\"} textAnchor={\"middle\"}\r\n            fill={tag.type.fontColour}\r\n          >{tag.type.prefix}{tag.played}</text>\r\n        </svg>\r\n        <rect\r\n          width={19} height={19} rx={10} ry={10}\r\n          fill={'transparent'} stroke={'transparent'}\r\n        >\r\n          <title>{tag.played} {tag.type.label} tags played</title>\r\n        </rect>\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TagCircle;\r\n","import React, {Component} from \"react\";\r\nimport GameService from \"../../game/GameService\";\r\nimport ProductionBox from \"../resources/ProductionBox\";\r\nimport ResourceAndProductionBoxes\r\n  from \"../resources/ResourceAndProductionBoxes\";\r\nimport TagCircle from \"../resources/TagCircle\";\r\n\r\nclass Player extends Component {\r\n  static getSize() {\r\n\t\treturn {\r\n    \twidth: (\r\n    \t  100\r\n        + 25 * GameService.resources.length\r\n        + (GameService.tags.length % Math.ceil(GameService.tags.length / 2) + 1) * 25\r\n      ),\r\n      height: 50,\r\n    };\r\n  }\r\n\r\n\tselectPlayer = () => {\r\n  \tthis.props.control.selectPlayer(this.props.player);\r\n  };\r\n\trender() {\r\n  \tconst {player, offset} = this.props;\r\n    const size = this.constructor.getSize();\r\n  \treturn (\r\n    \t<g transform={`translate(${offset.x}, ${offset.y})`}>\r\n    \t  <rect\r\n          x={0} y={0} width={size.width} height={size.height}\r\n          fill={player.colour} fillOpacity={player.active ? undefined : 0.4}\r\n          stroke={'black'} strokeWidth={2}\r\n          onClick={this.selectPlayer}\r\n          className={player.active ? undefined : 'clickable'}\r\n        />\r\n        <text\r\n          x={10} y={20}\r\n          fill={player.fontColour} style={{pointerEvents: 'none'}}\r\n        >\r\n          Player #{player.id}\r\n        </text>\r\n        <ProductionBox offset={{x: 100, y: 0}} resource={player.resources.tr} />\r\n        {GameService.resources.filter(resource => resource.name !== 'tr').map((resource, index) => (\r\n\t        <ResourceAndProductionBoxes\r\n            key={resource.name}\r\n            offset={{x: 100 + 25 * (index + 1), y: 0}}\r\n            resource={player.resources[resource.name]}\r\n          />\r\n        ))}\r\n        {GameService.tags.map((tag, index) => (\r\n\t        <TagCircle\r\n            key={tag.name}\r\n            offset={{\r\n            \tx: (\r\n            \t  100\r\n                + 25 * GameService.resources.length\r\n                + (index % Math.ceil(GameService.tags.length / 2)) * 25\r\n              ),\r\n              y: (\r\n                25 * Math.floor(index / Math.ceil(GameService.tags.length / 2))\r\n              ),\r\n            }}\r\n            tag={player.tags[tag.name]}\r\n          />\r\n        ))}\r\n    \t</g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import React, {Component} from \"react\";\r\nimport Player from \"./Player\";\r\n\r\nclass Players extends Component {\r\n  static getSize(players) {\r\n    const playerSize = Player.getSize();\r\n    return {\r\n      width: playerSize.width,\r\n      height: playerSize.height * players.length + 10 * (players.length - 1),\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const {players, offset, control} = this.props;\r\n    const playerSize = Player.getSize();\r\n    return (\r\n      <g transform={`translate(${offset.x}, ${offset.y})`}>\r\n        {players.map((player, index) =>\r\n          <Player\r\n            key={player.id}\r\n            offset={{x: 0, y: (playerSize.height + 10) * index}}\r\n            player={player}\r\n            control={control}\r\n          />\r\n        )}\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Players;\r\n","import React, {Component} from \"react\";\r\n\r\nclass RightArrow extends Component {\r\n  static path = (\r\n    \"M15.375,7L10,2.54C9.695,2.287,9.461,2,9,2C8.375,2,8,2.516,8\" +\r\n    \",3v3H1C0.45,6,0,6.45,0,7v2c0,0.55,0.45,1,1,1h7v3  c0,0.484\" +\r\n    \",0.375,1,1,1c0.461,0,0.695-0.287,1-0.54L15.375,9C15.758\" +\r\n    \",8.688,16,8.445,16,8S15.758,7.313,15.375,7z\"\r\n  );\r\n\r\n  render() {\r\n    const {offset} = this.props;\r\n    return (\r\n      <path\r\n        transform={`translate(${offset.x}, ${offset.y - 5})`}\r\n        d={this.constructor.path}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default RightArrow;\r\n","import React, {Component} from \"react\";\r\nimport GameService from \"../../game/GameService\";\r\nimport ResourceBox from \"../resources/ResourceBox\";\r\nimport RightArrow from \"../draw/RightArrow\";\r\nimport ProductionBox from \"../resources/ProductionBox\";\r\n\r\nclass PowerPlantStandardProject extends Component {\r\n  canPurchase() {\r\n    return GameService.canPurchase(this.props.activePlayer, this.props.project);\r\n  }\r\n\r\n  purchase = () => {\r\n    this.props.control.purchaseProject(this.props.activePlayer, this.props.project);\r\n  };\r\n\r\n  render() {\r\n    const {offset, project} = this.props;\r\n    const canPurchase = this.canPurchase();\r\n    return (\r\n      <g transform={`translate(${offset.x}, ${offset.y})`}>\r\n        <ResourceBox\r\n          resource={{\r\n            value: -project.cost.money.value,\r\n            type: GameService.resourcesByName.money\r\n          }}\r\n          offset={{x: 0, y: 0}}\r\n        />\r\n        <RightArrow offset={{x: 25, y: 10}}/>\r\n        <ProductionBox\r\n          resource={{\r\n            production: project.benefit.energy.production,\r\n            type: GameService.resourcesByName.energy\r\n          }}\r\n          offset={{x: 50, y: 0}}\r\n        />\r\n        <rect\r\n          x={100} y={0} width={130} height={25}\r\n          fill={'yellow'} fillOpacity={canPurchase ? undefined : 0.4}\r\n          stroke={'black'} strokeWidth={2}\r\n        />\r\n        <text x={110} y={20} fill={'black'}>Power Plant</text>\r\n        <rect\r\n          x={100} y={0} width={130} height={25}\r\n          fill={'transparent'}\r\n          className={canPurchase ? 'clickable' : undefined}\r\n          onClick={this.purchase}\r\n        />\r\n      </g>\r\n    );\r\n  }\r\n}\r\nGameService.standardProjectsByName.powerPlant.component = PowerPlantStandardProject;\r\n\r\nexport default PowerPlantStandardProject\r\n","import React, {Component} from \"react\";\r\nimport GameService from \"../../game/GameService\";\r\nimport PowerPlantStandardProject from \"./PowerPlantStandardProject\";\r\n\r\nclass StandardProjects extends Component {\r\n  static getSize(game) {\r\n    return {width: 250, height: 310};\r\n  }\r\n\r\n  render() {\r\n    const {offset, game, control} = this.props;\r\n    return (\r\n      <g transform={`translate(${offset.x}, ${offset.y})`}>\r\n        <rect\r\n          x={0} y={10} width={250} height={300}\r\n          fill={'silver'}\r\n          stroke={'black'} strokeWidth={2}\r\n        />\r\n\r\n        <rect\r\n          x={10} y={0} width={130} height={25}\r\n          fill={'yellow'}\r\n          stroke={'black'} strokeWidth={2}\r\n        />\r\n        <text x={20} y={20} fill={'black'}>Standard Projects</text>\r\n\r\n        {GameService.standardProjects.map((project, index) => (\r\n          <PowerPlantStandardProject\r\n            key={index}\r\n            offset={{x: 10, y: 35 + 25 * index}}\r\n            activePlayer={game.activePlayer} project={project}\r\n            control={control}\r\n          />\r\n        ))}\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StandardProjects;\r\n","import React, {Component} from \"react\";\r\n\r\nclass GlobalParameter extends Component {\r\n  static getSize(parameter) {\r\n    return {\r\n      width: 200,\r\n      height: 25,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const {offset, parameter} = this.props;\r\n    const globalParametersSize = this.constructor.getSize(parameter);\r\n    return (\r\n      <g transform={`translate(${offset.x}, ${offset.y})`}>\r\n        <rect x={0} y={0} width={globalParametersSize.width}\r\n              height={globalParametersSize.height}>\r\n          <title>{parameter.label}: {parameter.value}/{parameter.total}</title>\r\n        </rect>\r\n        <text x={10}\r\n              y={20}>{parameter.label}: {parameter.value}/{parameter.total}</text>\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalParameter;\r\n","import React, {Component} from \"react\";\r\nimport GlobalParameter from \"./GlobalParameter\";\r\n\r\nclass GlobalParameters extends Component {\r\n  static getSize(parameters) {\r\n    const globalParameterSize = GlobalParameter.getSize(null);\r\n    const rows = Math.ceil(parameters.length / 3);\r\n    return {\r\n      width: 3 * globalParameterSize.width,\r\n      height: rows * globalParameterSize.height + Math.max(0, rows - 1) * 10,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const {offset, parameters} = this.props;\r\n    const globalParameterSize = GlobalParameter.getSize(null);\r\n    return (\r\n      <g transform={`translate(${offset.x}, ${offset.y})`}>\r\n        {parameters.map((parameter, index) => {\r\n          const column = index % 3;\r\n          const row = Math.floor(index / 3);\r\n          return (\r\n            <GlobalParameter\r\n              offset={{\r\n                x: column * globalParameterSize.width + Math.max(0, column - 1) * 10,\r\n                y: row * globalParameterSize.height + Math.max(0, row - 1) * 10,\r\n              }}\r\n              key={parameter.name}\r\n              parameter={parameter}\r\n            />\r\n          );\r\n        })}\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalParameters;\r\n","import React, {Component} from \"react\";\r\nimport Board from \"./board/Board\";\r\nimport Players from \"./players/Players\";\r\nimport StandardProjects from \"./projects/StandardProjects\";\r\nimport GlobalParameters from \"./parameters/GlobalParameters\";\r\nimport DefaultHexagon from \"./draw/DefaultHexagon\";\r\n\r\nclass Game extends Component {\r\n  static getSize(game) {\r\n    const boardSize = Board.getSize(game.board);\r\n    const playersSize = Players.getSize(game.players);\r\n    const standardProjectsSize = StandardProjects.getSize(game);\r\n    return {\r\n      width: 10 + Math.max(boardSize.width, playersSize.width, standardProjectsSize.width) + 10,\r\n      height: 10 + boardSize.height + 20 + playersSize.height + 20 + standardProjectsSize.height + 10,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const {game, control} = this.props;\r\n    const gameSize = this.constructor.getSize(game);\r\n    const globalParametersSize = GlobalParameters.getSize(game.globalParameters);\r\n    const boardSize = Board.getSize(game.board);\r\n    const playersSize = Players.getSize(game.players);\r\n    return (\r\n      <svg width={gameSize.width} height={gameSize.height}>\r\n        <defs>\r\n          <DefaultHexagon.Def/>\r\n        </defs>\r\n        <GlobalParameters\r\n          parameters={game.globalParameters}\r\n          offset={{x: 10, y: 10}}\r\n        />\r\n        <Board\r\n          board={game.board}\r\n          offset={{x: 10, y: 10 + globalParametersSize.height + 20}}\r\n        />\r\n        <Players\r\n          offset={{\r\n            x: 10,\r\n            y: 10 + globalParametersSize.height + 20 + boardSize.height + 20,\r\n          }}\r\n          players={game.players}\r\n          control={control}\r\n        />\r\n        <StandardProjects\r\n          offset={{\r\n            x: 10,\r\n            y: 10 + globalParametersSize.height + 20 + boardSize.height + 20 + playersSize.height + 20\r\n          }}\r\n          game={game}\r\n          control={control}\r\n        />\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import GameService from \"./GameService\";\r\n\r\nclass GameControl {\r\n  constructor(update) {\r\n    this.update = update;\r\n  }\r\n\r\n  selectPlayer(player) {\r\n    this.update(game => ({\r\n      game: {\r\n        ...game,\r\n        activePlayer: player,\r\n        players: game.players.map(otherPlayer => ({\r\n          ...otherPlayer,\r\n          active: otherPlayer.id === player.id,\r\n        })),\r\n      },\r\n    }));\r\n  }\r\n\r\n  purchaseProject(player, project) {\r\n    this.update(game => {\r\n      [player] = game.players\r\n        .filter(otherPlayer => otherPlayer.id === player.id);\r\n      if (!player) {\r\n        return null;\r\n      }\r\n      if (!player.active) {\r\n        return null;\r\n      }\r\n      const newPlayer = GameService.purchase(player, project);\r\n      if (newPlayer === player) {\r\n        return null;\r\n      }\r\n      return {\r\n        game: {\r\n          ...game,\r\n          players: game.players.map(otherPlayer =>\r\n            otherPlayer.id === newPlayer.id ? newPlayer : otherPlayer),\r\n        },\r\n      };\r\n    });\r\n    this.updateActivePlayer();\r\n  }\r\n\r\n  updateActivePlayer() {\r\n    this.update(game => {\r\n      let [activePlayer] = game.players.filter(player => player.active);\r\n      activePlayer = activePlayer || null;\r\n      if (activePlayer === game.activePlayer) {\r\n        return null;\r\n      }\r\n      return {\r\n        game: {\r\n          ...game,\r\n          activePlayer,\r\n        },\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\nexport default GameControl;\r\n","import React, {Component, Fragment} from 'react';\nimport './App.css';\nimport GameService from \"./game/GameService\";\nimport Game from \"./components/Game\";\nimport GameControl from \"./game/GameControl\";\n\nclass App extends Component {\n\tstate = {\n    game: GameService.makeGame(),\n  };\n\n\tupdateGame = func => {\n\t  this.setState(({game}) => func(game));\n  };\n\n\tcontrol = new GameControl(this.updateGame);\n\n\trender() {\n  \tconst {game} = this.state;\n  \treturn (\n    \t<Fragment>\n    \t  Gaiaforming Ares\n        <br />\n      \t<Game game={game} control={this.control} />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}